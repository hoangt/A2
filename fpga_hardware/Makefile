ROOT = $(CURDIR)

CORES = $(ROOT)/cores
ORPSOC_RTL = $(CORES)/top
CLKGEN_RTL = $(CORES)/clkgen
ARBITER_RTL = $(CORES)/arbiter
DBG_IF_RTL = $(CORES)/dbg_if
JTAG_TAP_RTL = $(CORES)/jtag_tap
OR1200_RTL = $(CORES)/or1200
UART_RTL = $(CORES)/uart16550/rtl/verilog
RAM_RTL = $(CORES)/ram_wb
ADV_DBG_IF_RTL = $(CORES)/adv_debug_sys/Hardware/adv_dbg_if/rtl/verilog
XIL_INTERNAL_JTAG = $(CORES)/adv_debug_sys/Hardware/xilinx_internal_jtag/rtl/verilog

TEST_BENCH = $(CORES)/bench

IVERILOG_SRCS := $(wildcard $(ORPSOC_RTL)/*.v) $(wildcard $(CLKGEN_RTL)/*.v) $(wildcard $(ARBITER_RTL)/*.v) $(wildcard $(DBG_IF_RTL)/*.v) $(wildcard $(OR1200_RTL)/*.v) $(wildcard $(UART_RTL)/*.v)  $(wildcard $(RAM_RTL)/*.v) $(wildcard $(TEST_BENCH)/*.v)
IVERILOG_SRCS := $(filter-out %-defines.v %-params.v %_defines.v, $(IVERILOG_SRCS))


help:
	@echo "  all: Synthesize and implement the SoC, then generate a bit stream"
	@echo "  soc: Synthesize the SoC"
	@echo "  iverilog: Created simulation"
	@echo "  translate: Convert the SoC's ngc file to an ngd file for mapping"
	@echo "  map: Express the SoC netlist in the target hardware"
	@echo "  par: Place the target hardware, then route the wires"
	@echo "  bitgen: Generate a programming file for the target FPGA"
	@echo "  load: Load the programming file onto the FPGA"
	@echo "  clean: Delete all superfluous files generated by Xilinx tools"
	@echo "  distclean: Delete all generated files"

###########  MAIN TARGETS ###########################################

all: bitgen
soc: orpsoc_top.ngc
translate: orpsoc.ngd
map: orpsoc.ncd
par: orpsoc_par.ncd
bitgen: orpsoc.bit
iverilog: orpsoc.vvp

distclean: clean
	rm -rf *.{ngc,ncd,ngd,bit}  
clean:
	rm -rf _xmsgs xst *.{xst,xrpt,srp,lso,log,v,pwr,xml} *impact* auto_project* XPower_Isim

orpsoc.vvp: $(IVERILOG_SRCS)
	iverilog -s orpsoc_testbench  -t vvp -o $@ -I$(ORPSOC_RTL) -I$(DBG_IF_RTL) -I$(UART_RTL)  -I$(DBG_IF_RTL) -I$(OR1200_RTL) -I$(TEST_BENCH) $^

###########  SYNTHESIS TARGETS ###########################################

orpsoc_top.ngc: $(ORPSOC_RTL)/*.v  buildSupport/orpsoc_top.xst buildSupport/orpsoc_top.prj $(CLKGEN_RTL)/*.v $(ARBITER_RTL)/*.v $(DBG_IF_RTL)/*.v $(JTAG_TAP_RTL)/*.v $(OR1200_RTL)/*.v $(UART_RTL)/*.v $(ADV_DBG_IF_RTL)/*.v $(XIL_INTERNAL_JTAG)/*.v
	xst -ifn "buildSupport/orpsoc_top.xst"
	rm -f orpsoc_top_xst.xrpt
	rm -f orpsoc_top.srp
	rm -f orpsoc_top.lso
	rm -rf _xmsgs
	rm -rf xst

###########  IMPLEMENTATION TARGETS ###########################################

orpsoc.ngd: backend/ml509.ucf orpsoc_top.ngc
	ngdbuild -p xc5vlx110t-ff1136-3 -uc backend/ml509.ucf -aul -aut orpsoc_top.ngc orpsoc.ngd
	rm -rf netlist.lst
	rm -rf orpsoc.bld
	rm -rf orpsoc*.xrpt
	rm -rf xlnx_auto_0_xdb
	rm -rf _xmsgs
orpsoc.ncd : orpsoc.ngd
	map -global_opt on -lc off -logic_opt on -xe n -ol high -mt 2 -w orpsoc.ngd
	rm -rf orpsoc.{map,mrp,ngm,pcf,psr}
	rm -rf orpsoc*.xml
	rm -rf orpsoc_top*.xrpt
	rm -rf _xmsgs
orpsoc_par.ncd: orpsoc.ncd
	par -mt 4 -ol high -w -xe n orpsoc.ncd orpsoc_par.ncd
	rm -rf orpsoc_par.{pad,par,ptwx,unroutes,xpi}
	rm -rf orpsoc_par_pad*
	rm -rf orpsoc_top*.xrpt
	rm -rf _xmsgs
orpsoc.bit: orpsoc_par.ncd
	bitgen -d -w orpsoc_par.ncd orpsoc.bit
	rm -rf orpsoc.bgn
	rm -rf *.{xwbt,xml,log}
	rm -rf _xmsgs
